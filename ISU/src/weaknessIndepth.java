/*
Programmer: Mithusan Arulampalam, Zakariya Sohail, Shahmeir
Date: January 21, 2020
Program Name: Start of Year Assessment
* Program Description: This program will assess students based of a
* paragraph they have written
*/

//Imports
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

public class weaknessIndepth extends javax.swing.JFrame {
    //Creates an ArrayList of objects
    //The objects are defined by the 'studentData' class
    ArrayList<studentData> data = new ArrayList<studentData>();
    
    //ArrayList
    ArrayList<String> para = new ArrayList<String>();
    ArrayList<String> lastMark = new ArrayList<String>();
    ArrayList<String> name = new ArrayList<String>();
    ArrayList<String> weakness = new ArrayList<String>();
    
    
    /**
     * Creates new form weaknessIndepth
     */
    public weaknessIndepth() {
        initComponents();
        //Centers This Program
        this.setLocationRelativeTo(null);
        //Disables Textfields
        output.setEditable(false);
        output.setLineWrap(true);
        output.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        firstNameInput = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        lastNameInput = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        find = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel1.setText("Individual Assessment");

        jLabel2.setText("First Name");

        jLabel3.setText("Last Name");

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        find.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addGap(38, 38, 38)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(firstNameInput, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                        .addComponent(lastNameInput))
                                    .addGap(42, 42, 42)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(find, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(cancel, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(find, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancel)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Class
    class studentData{
        String fullName, mark, paragraph;
        
        studentData(String _fullName, String _mark, String _paragraph){
            fullName = _fullName;
            mark = _mark;
            paragraph = _paragraph;
        }
    }
    
    //ReadData
    public void readData(){
        try {
            Scanner file1 = new Scanner(new File("StudentName.txt"));
            
            while (file1.hasNextLine()) {
                
                name.add(file1.nextLine());
                
            }//while (file.hasNextLine()) 
            
            file1.close();
            
            Scanner file2 = new Scanner(new File("StudentMark.txt"));
            
            while (file2.hasNextLine()) {
                
                lastMark.add(file2.nextLine());
                
            }//while (file.hasNextLine()) 
            
            file2.close();
            
            Scanner file3 = new Scanner(new File("StudentParagraph.txt"));
            
            while (file3.hasNextLine()) {
                
                para.add(file3.nextLine());
                
            }//while (file.hasNextLine()) 
            
            file3.close();
            
        } catch (FileNotFoundException e) {
            throw new ArithmeticException("Error cannot locate Booklist");
        }
    }
    
    //Adds Data to Class
    public void addClassData(){
        studentData s;

        for(int x = 0; x < name.size(); x++){
            s = new studentData(name.get(x), lastMark.get(x), para.get(x));
            data.add(s);
        }
    }
 
    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        //Closes this panel
        this.setVisible(false);
        
    }//GEN-LAST:event_cancelActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed
        //Calls Custom Functions
        readData();
        addClassData();
        
        //Variables
        String fName = firstNameInput.getText().toLowerCase();
        String lName = lastNameInput.getText().toLowerCase();
        String weakness = "";
        
        int grammarCapital = 0;
        int runOnSentence = 0;
        int capitalI = 0;
        int error = 0;
        
        output.setText("");
        
        //Assement Check
        for (int x = 0; x < data.size(); x++){
                if (data.get(x).fullName.equals(lName + " " + fName)){
                    Pattern re = Pattern.compile("[^.!?\\s][^.!?]*(?:[.!?](?!['\"]?\\s|$)[^.!?]*)*[.!?]?['\"]?(?=\\s|$)", Pattern.MULTILINE | Pattern.COMMENTS); 
                Matcher reMatcher = re.matcher(data.get(x).paragraph); 

                while (reMatcher.find()) { 
                    String sentence = reMatcher.group();

                    // Creating array of string length 
                    char[] ch = new char[sentence.length()]; 

                    // Copy character by character into array 
                    for (int i = 0; i < sentence.length(); i++) { 
                        ch[i] = sentence.charAt(i); 
                    }
                    
                    //Checks if First Letter is Capital
                    if (ch[0] < 'A' || ch[0] > 'Z'){
                        grammarCapital++;
                    }
                    
                    //Checks if sentence is longer than 2 sentences
                    if (ch.length > 100){
                        runOnSentence++;
                    }
                    
                    //Divides Sentences into words
                    String[] words = sentence.split("[[ ]*|[,]*|[;]*|[:]*|[']*|[’]*|[\\\\.]*|[:]*|[/]*|[!]*|[?]*|[+]*]+");
                    for (int i = 0; i < words.length; i++) {
                        words[i] = words[i].replaceAll("[^\\w]", "");
                    }   
                    
                    //Checks if lone i's are not capitalized
                    for (int i = 0; i < words.length; i++) {
                        if(words[i].equals("i")){
                            capitalI++;
                        }
                    }
                }
                
                //Adds To Overall Weakness depending on Highest Issue
                if (grammarCapital >= runOnSentence && grammarCapital >= capitalI){
                    weakness += ",Capitalization ";
                }
                if (runOnSentence >= grammarCapital && runOnSentence >= capitalI){
                    weakness += ",Run on sentences ";
                }
                if (capitalI >= runOnSentence && capitalI >= grammarCapital){
                    weakness += ",Capital I ";
                }
                
                //Output
                output.setText("Selected Student: " + data.get(x).fullName + 
                        "\nLast Year's Grade " + data.get(x).mark + "\n\nWhat "
                        + "Student Handed-in: \n" + data.get(x).paragraph + "\n"
                        + "\nSystem Determined Weakness: " + weakness + "\n\n"
                        + "Times Weakness Caught:\nCapitalization: " + grammarCapital
                        + "\nRun on sentences: " + runOnSentence + "\nCapital I: "
                        + capitalI);       
                break;
            }
            else{
                error++;
            }
        }
        
        //If Student does not exist
        if (error == data.size()){
            JOptionPane.showMessageDialog(null, "Error! No Students Under: " + fName + " " + lName);
        }
        
    }//GEN-LAST:event_findActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(weaknessIndepth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(weaknessIndepth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(weaknessIndepth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(weaknessIndepth.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new weaknessIndepth().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton find;
    private javax.swing.JTextField firstNameInput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lastNameInput;
    private javax.swing.JTextArea output;
    // End of variables declaration//GEN-END:variables
}
