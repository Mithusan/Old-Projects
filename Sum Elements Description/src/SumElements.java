/*
Programmer: Mithusan Arulampalam
Date: October 18th, 2019
Program Name: Sum Elements
* Program Description: Has the ability to store and display integer 
* values in an array displays sum of All Integers, Even Integers, 
* and Odd Integers
*/

//Imports ArrayList
import java.util.ArrayList;

public class SumElements extends javax.swing.JFrame {
    //Creates an ArrayList that can Be used throught the Program
    ArrayList<Integer> Numbers = new ArrayList<>();//Arraylist
    ArrayList<Integer> Even = new ArrayList<>();//Arraylist
    ArrayList<Integer> Odd = new ArrayList<>();//Arraylist
    
    public SumElements() {
        initComponents();
        //Disables Textfields
        ListOutput.setEditable(false);
        SumOutput.setEditable(false);
        
        //Disables Buttons
        RemoveButton.setEnabled(false);//Remove Button
        ListButton.setEnabled(false);//Lists all Integer in Array
        SumAll.setEnabled(false);//Sum of All Integers
        SumEven.setEnabled(false);//Sum of all Even Integers
        SumOdd.setEnabled(false); //Sum of all Odd Integers
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleLabel = new javax.swing.JLabel();
        IntegerLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListOutput = new javax.swing.JTextArea();
        Input = new javax.swing.JTextField();
        AddButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        SumAll = new javax.swing.JButton();
        SumEven = new javax.swing.JButton();
        SumOdd = new javax.swing.JButton();
        ListButton = new javax.swing.JButton();
        SumOutput = new javax.swing.JTextField();
        ExitButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TitleLabel.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        TitleLabel.setForeground(new java.awt.Color(255, 0, 0));
        TitleLabel.setText("Integer Sums");

        IntegerLabel.setText("Enter an Integer:");

        ListOutput.setColumns(20);
        ListOutput.setRows(5);
        jScrollPane1.setViewportView(ListOutput);

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        SumAll.setText("Sum All");
        SumAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumAllActionPerformed(evt);
            }
        });

        SumEven.setText("Sum Even");
        SumEven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumEvenActionPerformed(evt);
            }
        });

        SumOdd.setText("Sum Odd");
        SumOdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SumOddActionPerformed(evt);
            }
        });

        ListButton.setText("List");
        ListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(IntegerLabel)
                        .addGap(18, 18, 18)
                        .addComponent(Input)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ListButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(RemoveButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SumAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SumEven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(SumOdd, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(35, 35, 35)))
                        .addContainerGap(23, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(SumOutput))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addComponent(TitleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IntegerLabel)
                    .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AddButton)
                    .addComponent(RemoveButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ListButton)
                        .addGap(18, 18, 18)
                        .addComponent(SumAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SumEven)
                        .addGap(13, 13, 13)
                        .addComponent(SumOdd)
                        .addGap(18, 18, 18)
                        .addComponent(SumOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ExitButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        //Closes Program
        this.dispose();
        
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        //TRY CATCH
        //Try
        try{
            //Variable for the user input
            int input = Integer.parseInt(Input.getText());
            
            //Checks if input is a positive Integer
            if (input >= 0){
                //Adds inputed Number to Integer Arraylist
                Numbers.add(input);

                //If there is atleast one integer in the array 
                //other options will be available to the user
                if (Numbers.size() > 0){
                    RemoveButton.setEnabled(true);//Remove Button
                    ListButton.setEnabled(true);//Lists all Integer in Array
                    SumAll.setEnabled(true);//Sum of All Integers
                    SumEven.setEnabled(true);//Sum of all Even Integers
                    SumOdd.setEnabled(true); //Sum of all Odd Integers
                }//if (Numbers.size() > 0)
            }//if (input >= 0)
            //Will Print output if inputed integer is a negative integer
            else{
               //Error Output
               ListOutput.setText("Please Use Postive Numbers!"); 
            }//End of Else
        }//End of Try
        //Catch
        catch(NumberFormatException e){//Only Takes Integers
            //Error Output
            ListOutput.setText("Please Input in Correct Format!");
        }//End of Catch
        
    }//GEN-LAST:event_AddButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        //TRY CATCH
        //Try
        try{
            //Variable for the user input
            int input = Integer.parseInt(Input.getText());
            
            //Removes inputed Number from the Integer Arraylist
            Numbers.remove(Integer.valueOf(input));
            
            //If there is no integers in the array the
            //other options will not available to the user
            if (Numbers.size() < 1){
                RemoveButton.setEnabled(false);//Remove Button
                ListButton.setEnabled(false);//Lists all Integer in Array
                SumAll.setEnabled(false);//Sum of All Integers
                SumEven.setEnabled(false);//Sum of all Even Integers
                SumOdd.setEnabled(false); //Sum of all Odd Integers
            }//if (Numbers.size() < 1)
        }//End of Try
        //Catch
        catch(NumberFormatException e){//Only Takes Integers
            //Error Output
            ListOutput.setText("Please Input in Correct Format!");
        }//End of Catch
        
    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void ListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListButtonActionPerformed
        //Provides an alternative to String Class for Arraylist
        StringBuilder sb = new StringBuilder();
            for(Integer s : Numbers){//for loop
                sb.append(s);
                sb.append("\n");//Spaces the List > Next Line
            }
        //Output
        ListOutput.setText(sb.toString());
        
    }//GEN-LAST:event_ListButtonActionPerformed

    private void SumAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumAllActionPerformed
        //Variable
        int sum = 0;
        
        //For Loop
        //Will Loop until 'i' is no longer smaller than the amount
        //of entries in 'Numbers' ArrayList
        for (int i = 0; i < Numbers.size(); i++){
            //Adds Each Integer in Arraylist to Variable 'sum'
            sum += Numbers.get(i);
        }//for (int i = 0; i < Numbers.size(); i++)
        //Output
        SumOutput.setText("The total of the entries is: " + sum);
        
    }//GEN-LAST:event_SumAllActionPerformed

    private void SumEvenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumEvenActionPerformed
        //Variables
        int sum = 0;
        int even = 0;
        
        //For Loop
        //Will Loop until 'i' is no longer smaller than the amount
        //of entries in 'Numbers' ArrayList
        for (int i = 0; i < Numbers.size(); i++){
            //For Each instance of the for loop 'even'
            //will be equal to the Integer that is being checked
            even = Numbers.get(i);
            
            //If the remainder is 0, the number must be even
            if (even % 2 == 0){
                //Adds Each Even Integer in Arraylist to Variable 'sum'
                sum += Numbers.get(i);
                Even.add(Numbers.get(i));
                
            }//if (even % 2 == 0)
        }//for (int i = 0; i < Numbers.size(); i++)
        //Output
        //Provides an alternative to String Class for Arraylist
        StringBuilder sb = new StringBuilder();
            for(Integer s : Even){//for loop
                sb.append(s);
                sb.append("\n");//Spaces the List > Next Line
            }
        ListOutput.setText(sb.toString());
        SumOutput.setText("Sum of Even: " + sum);
  
    }//GEN-LAST:event_SumEvenActionPerformed

    private void SumOddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SumOddActionPerformed
        //Variables
        int sum = 0;
        int even = 0;
        
        //For Loop
        //Will Loop until 'i' is no longer smaller than the amount
        //of entries in 'Numbers' ArrayList
        for (int i = 0; i < Numbers.size(); i++){
            //For Each instance of the for loop 'even'
            //will be equal to the Integer that is being checked
            even = Numbers.get(i);
            
            //If there is a remainder, the number must be odd.
            if (even % 2 != 0){
                //Adds Each Odd Integer in Arraylist to Variable 'sum'
                sum += Numbers.get(i);
                Odd.add(Numbers.get(i));
                
            }//if (even % 2 != 0)
        }//for (int i = 0; i < Numbers.size(); i++)
        //Output
        //Provides an alternative to String Class for Arraylist
        StringBuilder sb = new StringBuilder();
            for(Integer s : Odd){//for loop
                sb.append(s);
                sb.append("\n");//Spaces the List > Next Line
            }
        ListOutput.setText(sb.toString());
        SumOutput.setText("Sum of Odd: " + sum);
        
    }//GEN-LAST:event_SumOddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SumElements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SumElements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SumElements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SumElements.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SumElements().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField Input;
    private javax.swing.JLabel IntegerLabel;
    private javax.swing.JButton ListButton;
    private javax.swing.JTextArea ListOutput;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JButton SumAll;
    private javax.swing.JButton SumEven;
    private javax.swing.JButton SumOdd;
    private javax.swing.JTextField SumOutput;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

}
